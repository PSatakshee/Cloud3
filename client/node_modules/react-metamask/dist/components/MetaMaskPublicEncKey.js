"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/web.dom-collections.iterator.js");

var _react = _interopRequireWildcard(require("react"));

var _reactstrap = require("reactstrap");

require("bootstrap/dist/css/bootstrap.min.css");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MetaMaskPublicEncKey extends _react.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      pubEncKey: null
    });

    _defineProperty(this, "btnFetchPublicEncKey", () => {
      window.ethereum.request({
        method: 'eth_getEncryptionPublicKey',
        params: [window.ethereum.selectedAddress]
      }).then(result => {
        this.setState({
          pubEncKey: result
        });
      }).catch(error => {
        console.error(error);
      });
    });
  }

  componentDidMount() {
    if (window.ethereum) {
      window.ethereum.on('accountsChanged', () => {
        this.setState({
          pubEncKey: null
        });
      });
    }
  }

  componentWillUnmount() {
    if (window.ethereum) {
      window.ethereum.removeListener('accountsChanged', () => {
        this.setState({
          pubEncKey: null
        });
      });
    }
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        padding: '2px'
      }
    }, /*#__PURE__*/_react.default.createElement(_reactstrap.InputGroup, null, /*#__PURE__*/_react.default.createElement(_reactstrap.InputGroupText, null, /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
      size: "sm",
      outline: true,
      color: "dark",
      onClick: this.btnFetchPublicEncKey
    }, "Fetch")), /*#__PURE__*/_react.default.createElement(_reactstrap.InputGroupText, null, this.state.pubEncKey)));
  }

}

exports.default = MetaMaskPublicEncKey;