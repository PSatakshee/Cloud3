"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/es.promise.js");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactstrap = require("reactstrap");

require("bootstrap/dist/css/bootstrap.min.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
    Sample usage:
    showNetworkConfig is by default false. Will just show a button. 
    Set showNetworkConfig to true to see the network config details.

    <MetaMaskAddNetwork chainId='0x42' chainName='O K Exchain'  
        rpcUrl='https://exchainrpc.okex.org' 
        blockExplorerUrl='https://www.oklink.com/okexchain' 
        nativeCurrency={{name: 'OKEX', symbol: 'OKT', decimals: 18}}
        showNetworkConfig=true
    >
    </MetaMaskAddNetwork>
*/
class MetaMaskAddNetwork extends _react.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      showNetworkConfig: this.props.showNetworkConfig
    });

    _defineProperty(this, "btnMetaMaskAddNetwork", async () => {
      try {
        await window.ethereum.request({
          method: 'wallet_addEthereumChain',
          params: [{
            chainId: this.props.chainId,
            chainName: this.props.chainName,
            rpcUrls: [this.props.rpcUrl],
            blockExplorerUrls: [this.props.blockExplorerUrl],
            nativeCurrency: {
              name: this.props.nativeCurrency.name,
              symbol: this.props.nativeCurrency.symbol,
              decimals: this.props.nativeCurrency.decimals
            }
          }]
        });
        console.log("".concat(this.props.chainName, " (").concat(this.props.chainId, ") network added to MetaMask!"));
      } catch (addError) {
        console.log("Cannot add ".concat(this.props.chainName, " (").concat(this.props.chainId, ") to MetaMask!"));
      }
    });

    _defineProperty(this, "btnToggleShowNetworkConfig", () => {
      this.setState({
        showNetworkConfig: !this.state.showNetworkConfig
      });
    });
  }

  render() {
    if (!this.state.showNetworkConfig) {
      return /*#__PURE__*/_react.default.createElement("div", {
        style: {
          padding: '2px'
        }
      }, /*#__PURE__*/_react.default.createElement(_reactstrap.InputGroup, null, /*#__PURE__*/_react.default.createElement(_reactstrap.InputGroupText, null, /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
        size: "sm",
        outline: true,
        color: "primary",
        onClick: this.btnToggleShowNetworkConfig
      }, "...")), /*#__PURE__*/_react.default.createElement(_reactstrap.InputGroupText, null, /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
        size: "sm",
        color: "primary",
        onClick: this.btnMetaMaskAddNetwork
      }, "Add ", this.props.chainName, " Network"))));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        padding: '2px'
      }
    }, /*#__PURE__*/_react.default.createElement(_reactstrap.Table, {
      bordered: true,
      striped: true
    }, /*#__PURE__*/_react.default.createElement("thead", null, /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("th", null, "Parameter"), /*#__PURE__*/_react.default.createElement("th", null, "Value"))), /*#__PURE__*/_react.default.createElement("tbody", null, /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("th", {
      scope: "row"
    }, "ChainId"), /*#__PURE__*/_react.default.createElement("td", null, this.props.chainId)), /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("th", {
      scope: "row"
    }, "ChainName"), /*#__PURE__*/_react.default.createElement("td", null, this.props.chainName)), /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("th", {
      scope: "row"
    }, "RpcUrl"), /*#__PURE__*/_react.default.createElement("td", null, this.props.rpcUrl)), /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("th", {
      scope: "row"
    }, "ExplorerUrl"), /*#__PURE__*/_react.default.createElement("td", null, this.props.blockExplorerUrl)), /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("th", {
      scope: "row"
    }, "Currency"), /*#__PURE__*/_react.default.createElement("td", null, this.props.nativeCurrency.name)), /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("th", {
      scope: "row"
    }, "Symbol"), /*#__PURE__*/_react.default.createElement("td", null, this.props.nativeCurrency.symbol)), /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("th", {
      scope: "row"
    }, "Decimals"), /*#__PURE__*/_react.default.createElement("td", null, this.props.nativeCurrency.decimals)))), /*#__PURE__*/_react.default.createElement("div", {
      style: {
        padding: '2px'
      }
    }, /*#__PURE__*/_react.default.createElement(_reactstrap.InputGroup, null, /*#__PURE__*/_react.default.createElement(_reactstrap.InputGroupText, null, /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
      size: "sm",
      outline: true,
      color: "primary",
      onClick: this.btnToggleShowNetworkConfig
    }, "...")), /*#__PURE__*/_react.default.createElement(_reactstrap.InputGroupText, null, /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
      size: "sm",
      color: "primary",
      onClick: this.btnMetaMaskAddNetwork
    }, "Add ", this.props.chainName, " Network")))));
  }

}

exports.default = MetaMaskAddNetwork;
MetaMaskAddNetwork.protoTypes = {
  chainId: _propTypes.default.string.isRequired,
  chainName: _propTypes.default.string.isRequired,
  rpcUrl: _propTypes.default.string.isRequired,
  blockExplorerUrl: _propTypes.default.string.isRequired,
  nativeCurrency: _propTypes.default.exact({
    name: _propTypes.default.string.isRequired,
    symbol: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number.isRequired
  }),
  showNetworkConfig: _propTypes.default.bool.isRequired
};
MetaMaskAddNetwork.defaultProps = {
  showNetworkConfig: false
};