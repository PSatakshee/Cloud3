"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/web.dom-collections.iterator.js");

var _react = _interopRequireWildcard(require("react"));

var _reactstrap = require("reactstrap");

var _propTypes = _interopRequireDefault(require("prop-types"));

require("bootstrap/dist/css/bootstrap.min.css");

require("./styles.css");

var _metamaskFox = _interopRequireDefault(require("./metamask-fox.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
    Sample usage:
    By default type is ERC20 and decimals is 18. No need to provide in props
    
    <MetaMaskTokenWatch 
        address='0x155040625D7ae3e9caDA9a73E3E44f76D3Ed1409' 
        symbol='REVO'
    >
    </MetaMaskTokenWatch>
*/
class MetaMaskTokenWatch extends _react.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "btnMetaMaskTokenWatch", () => {
      window.ethereum.request({
        method: 'wallet_watchAsset',
        params: {
          type: this.props.type,
          options: {
            address: this.props.address,
            symbol: this.props.symbol,
            decimals: this.props.decimals,
            image: this.props.image
          }
        }
      }).then(success => {
        if (success) {
          console.log('Token successfully added to wallet!');
        } else {
          throw new Error('Something went wrong. Cannot add token to MetaMask!');
        }
      }).catch(console.error);
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_reactstrap.InputGroup, null, /*#__PURE__*/_react.default.createElement(_reactstrap.InputGroupText, {
      className: "MetaMaskWatch"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: _metamaskFox.default
    }), /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
      className: "ml-1",
      size: "sm",
      color: "primary",
      onClick: this.btnMetaMaskTokenWatch
    }, "Add ", this.props.symbol, " Token"))));
  }

}

exports.default = MetaMaskTokenWatch;
MetaMaskTokenWatch.propTypes = {
  address: _propTypes.default.string.isRequired,
  symbol: _propTypes.default.string.isRequired,
  decimals: _propTypes.default.number.isRequired,
  image: _propTypes.default.string,
  type: _propTypes.default.string.isRequired
};
MetaMaskTokenWatch.defaultProps = {
  type: 'ERC20',
  decimals: 18
};