"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/es.promise.js");

var _react = _interopRequireWildcard(require("react"));

var _reactstrap = require("reactstrap");

require("bootstrap/dist/css/bootstrap.min.css");

var _metamaskFox = _interopRequireDefault(require("./metamask-fox.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MetaMaskConnect extends _react.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      networkId: null,
      address: null,
      connected: false
    });

    _defineProperty(this, "btnMetaMaskConnect", async () => {
      try {
        const accounts = await window.ethereum.request({
          method: 'eth_requestAccounts'
        });
        const networkId = window.ethereum.networkVersion;
        this.setState({
          address: accounts[0],
          networkId: networkId,
          connected: true
        });
      } catch (e) {
        console.log('Please make sure MetaMask is installed and logged in !');
      }
    });
  }

  componentWillUnmount() {
    if (window.ethereum) {
      window.ethereum.removeListener('chainChanged', this.btnMetaMaskConnect);
      window.ethereum.removeListener('accountsChanged', this.btnMetaMaskConnect);
    }
  }

  getNetworkName(networkId) {
    switch (networkId) {
      case '1':
        return "Ethereum";

      case '56':
        return "Binance Smart Chain";

      case '43114':
        return 'Avalanche';

      case '61':
        return 'Ethereum Classic';

      case '250':
        return 'Fantom Opera';

      case '137':
        return 'Polygon MATIC';

      case '106':
        return 'Velas';

      case '321':
        return 'KCC';

      default:
        return "Unknown Network";
    }
  }

  componentDidMount() {
    if (window.ethereum) {
      window.ethereum.on('chainChanged', this.btnMetaMaskConnect);
      window.ethereum.on('accountsChanged', this.btnMetaMaskConnect);
      this.btnMetaMaskConnect();
    }
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        padding: '2px'
      }
    }, /*#__PURE__*/_react.default.createElement(_reactstrap.InputGroup, null, /*#__PURE__*/_react.default.createElement(_reactstrap.InputGroupText, null, /*#__PURE__*/_react.default.createElement("img", {
      src: _metamaskFox.default
    })), /*#__PURE__*/_react.default.createElement(_reactstrap.InputGroupText, null, /*#__PURE__*/_react.default.createElement(_reactstrap.Badge, {
      color: "success"
    }, "@", this.getNetworkName(this.state.networkId))), /*#__PURE__*/_react.default.createElement(_reactstrap.InputGroupText, null, this.state.address), this.state.connected ? '' : /*#__PURE__*/_react.default.createElement(_reactstrap.InputGroupText, null, /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
      size: "sm",
      outline: true,
      color: "danger",
      onClick: this.btnMetaMaskConnect
    }, "Connect to MetaMask"))));
  }

}

exports.default = MetaMaskConnect;