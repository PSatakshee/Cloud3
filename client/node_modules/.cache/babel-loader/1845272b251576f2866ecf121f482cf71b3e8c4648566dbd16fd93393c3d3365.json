{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\cloud-3\\\\client\\\\src\\\\components\\\\AccessControl.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccessControl = ({\n  contract\n}) => {\n  _s();\n  const [accessList, setAccessList] = useState([]);\n  const [newUserAddress, setNewUserAddress] = useState(\"\");\n  useEffect(() => {\n    const fetchAccessList = async () => {\n      try {\n        const list = await contract.shareAccess();\n        setAccessList(list);\n      } catch (error) {\n        console.error(\"Error fetching access list:\", error);\n      }\n    };\n    fetchAccessList();\n  }, [contract]);\n  const handleAllow = async () => {\n    if (!ethers.isAddress(newUserAddress)) {\n      alert(\"Invalid Ethereum address\");\n      return;\n    }\n    try {\n      await contract.allow(newUserAddress);\n      alert(\"Access granted successfully\");\n      setNewUserAddress(\"\");\n      // Refresh the access list\n      const updatedList = await contract.shareAccess();\n      setAccessList(updatedList);\n    } catch (error) {\n      console.error(\"Error granting access:\", error);\n      alert(\"Error granting access\");\n    }\n  };\n  const handleDisallow = async address => {\n    try {\n      await contract.disallow(address);\n      alert(\"Access revoked successfully\");\n      // Refresh the access list\n      const updatedList = await contract.shareAccess();\n      setAccessList(updatedList);\n    } catch (error) {\n      console.error(\"Error revoking access:\", error);\n      alert(\"Error revoking access\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Access Control\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"access\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newUserAddress,\n        onChange: e => setNewUserAddress(e.target.value),\n        placeholder: \"Enter Ethereum address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAllow,\n        children: \"Grant Access\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"access\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(AccessControl, \"ipvkjYjNM+RO0WAKKA0FBBI9xY4=\");\n_c = AccessControl;\nexport default AccessControl;\nvar _c;\n$RefreshReg$(_c, \"AccessControl\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","AccessControl","contract","_s","accessList","setAccessList","newUserAddress","setNewUserAddress","fetchAccessList","list","shareAccess","error","console","handleAllow","isAddress","alert","allow","updatedList","handleDisallow","address","disallow","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/Projects/cloud-3/client/src/components/AccessControl.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nconst AccessControl = ({ contract }) => {\r\n  const [accessList, setAccessList] = useState([]);\r\n  const [newUserAddress, setNewUserAddress] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchAccessList = async () => {\r\n      try {\r\n        const list = await contract.shareAccess();\r\n        setAccessList(list);\r\n      } catch (error) {\r\n        console.error(\"Error fetching access list:\", error);\r\n      }\r\n    };\r\n\r\n    fetchAccessList();\r\n  }, [contract]);\r\n\r\n  const handleAllow = async () => {\r\n    if (!ethers.isAddress(newUserAddress)) {\r\n      alert(\"Invalid Ethereum address\");\r\n      return;\r\n    }\r\n    try {\r\n      await contract.allow(newUserAddress);\r\n      alert(\"Access granted successfully\");\r\n      setNewUserAddress(\"\");\r\n      // Refresh the access list\r\n      const updatedList = await contract.shareAccess();\r\n      setAccessList(updatedList);\r\n    } catch (error) {\r\n      console.error(\"Error granting access:\", error);\r\n      alert(\"Error granting access\");\r\n    }\r\n  };\r\n\r\n  const handleDisallow = async (address) => {\r\n    try {\r\n      await contract.disallow(address);\r\n      alert(\"Access revoked successfully\");\r\n      // Refresh the access list\r\n      const updatedList = await contract.shareAccess();\r\n      setAccessList(updatedList);\r\n    } catch (error) {\r\n      console.error(\"Error revoking access:\", error);\r\n      alert(\"Error revoking access\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Access Control</h2>\r\n      <div className=\"access\">\r\n        <input\r\n          type=\"text\"\r\n          value={newUserAddress}\r\n          onChange={(e) => setNewUserAddress(e.target.value)}\r\n          placeholder=\"Enter Ethereum address\"\r\n        />\r\n        <button onClick={handleAllow}>Grant Access</button>\r\n      </div>\r\n      <div className=\"access\">\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccessControl;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}