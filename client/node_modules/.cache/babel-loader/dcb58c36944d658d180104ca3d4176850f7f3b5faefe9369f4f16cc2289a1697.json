{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\cloud-3\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport FileUpload from './components/FileUpload';\nimport FileList from './components/FileList';\nimport AccessControl from './components/AccessControl';\nimport uploadAbi from './artifacts/contracts/Upload.sol/Upload.json';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"YOUR_DEPLOYED_CONTRACT_ADDRESS\";\nfunction App() {\n  _s();\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  useEffect(() => {\n    // const init = async () => {\n    //   if (window.ethereum) {\n    //     try {\n    //       // Request account access\n    //       await window.ethereum.request({ method: 'eth_requestAccounts' });\n    //       // const provider = new ethers.providers.Web3Provider(window.ethereum);\n    //       const provider = new ethers.BrowserProvider(window.ethereum);\n\n    //       const signer = provider.getSigner();\n    //       const address = await signer.getAddress();\n    //       setAccount(address);\n\n    //       const uploadContract = new ethers.Contract(contractAddress, uploadAbi.abi, signer);\n    //       setContract(uploadContract);\n    //     } catch (error) {\n    //       console.error(\"Error connecting to MetaMask\", error);\n    //     }\n    //   } else {\n    //     console.log(\"Please install MetaMask!\");\n    //   }\n    // };\n    const init = async () => {\n      if (window.ethereum) {\n        try {\n          await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          const provider = new ethers.BrowserProvider(window.ethereum);\n          const signer = await provider.getSigner();\n          const address = await signer.getAddress();\n          setAccount(address);\n          const uploadContract = new ethers.Contract(contractAddress, uploadAbi.abi, signer);\n          setContract(uploadContract);\n        } catch (error) {\n          console.error(\"Error connecting to MetaMask\", error);\n        }\n      } else {\n        console.log(\"Please install MetaMask!\");\n      }\n    };\n    init();\n  }, []);\n  if (!account) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Please connect to MetaMask\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"heading\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Cloud \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Connected Account: \", account]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), contract && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(FileUpload, {\n        contract: contract\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FileList, {\n        contract: contract\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AccessControl, {\n        contract: contract\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xSEQfs8N/BI0ZCIV+ajpi7Tkthg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ethers","FileUpload","FileList","AccessControl","uploadAbi","jsxDEV","_jsxDEV","Fragment","_Fragment","contractAddress","App","_s","contract","setContract","account","setAccount","init","window","ethereum","request","method","provider","BrowserProvider","signer","getSigner","address","getAddress","uploadContract","Contract","abi","error","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["D:/Projects/cloud-3/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport FileUpload from './components/FileUpload';\nimport FileList from './components/FileList';\nimport AccessControl from './components/AccessControl';\nimport uploadAbi from './artifacts/contracts/Upload.sol/Upload.json';\nimport './App.css'\nconst contractAddress = \"YOUR_DEPLOYED_CONTRACT_ADDRESS\";\n\nfunction App() {\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n\n  useEffect(() => {\n    // const init = async () => {\n    //   if (window.ethereum) {\n    //     try {\n    //       // Request account access\n    //       await window.ethereum.request({ method: 'eth_requestAccounts' });\n    //       // const provider = new ethers.providers.Web3Provider(window.ethereum);\n    //       const provider = new ethers.BrowserProvider(window.ethereum);\n\n    //       const signer = provider.getSigner();\n    //       const address = await signer.getAddress();\n    //       setAccount(address);\n\n    //       const uploadContract = new ethers.Contract(contractAddress, uploadAbi.abi, signer);\n    //       setContract(uploadContract);\n    //     } catch (error) {\n    //       console.error(\"Error connecting to MetaMask\", error);\n    //     }\n    //   } else {\n    //     console.log(\"Please install MetaMask!\");\n    //   }\n    // };\n    const init = async () => {\n      if (window.ethereum) {\n        try {\n          await window.ethereum.request({ method: 'eth_requestAccounts' });\n          const provider = new ethers.BrowserProvider(window.ethereum);\n          const signer = await provider.getSigner();\n          const address = await signer.getAddress();\n          setAccount(address);\n    \n          const uploadContract = new ethers.Contract(contractAddress, uploadAbi.abi, signer);\n          setContract(uploadContract);\n        } catch (error) {\n          console.error(\"Error connecting to MetaMask\", error);\n        }\n      } else {\n        console.log(\"Please install MetaMask!\");\n      }\n    };\n    init();\n  }, []);\n\n  if (!account) {\n    return <div>Please connect to MetaMask</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"heading\">\n      <h1>Cloud </h1>\n      <p>Connected Account: {account}</p>\n      </div>\n      {contract && (\n        <>\n          <FileUpload contract={contract} />\n          <FileList contract={contract} />\n          <AccessControl contract={contract} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}